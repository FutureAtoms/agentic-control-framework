# Cursor AI Workflow Rules for Agentic Control Framework

This document outlines the rules and workflow for using the Agentic Control Framework (ACF) with Cursor AI. Follow these instructions carefully to ensure smooth and efficient project management.

## Core Principles

1.  **Task-Driven Workflow:** All work must be associated with a task or subtask. Before starting any work, identify the correct task or create a new one.
2.  **Clarity and Detail:** Your task descriptions, updates, and messages should be clear, concise, and provide sufficient detail for other team members (human or AI) to understand the context.
3.  **Verification is Mandatory:** Every task must have a clear, executable test to verify its completion. This is non-negotiable.

## The Task Lifecycle

### 1. Getting Started

-   To see the list of tasks, use \`list\` or \`ls\`.
    -   Example: \`acf list\`
-   To get the next highest-priority task, use \`next\`.
    -   Example: \`acf next\`
-   To see the full details of a task, including its description, files, and tests, use \`context\`.
    -   Example: \`acf context 3\`
    -   Example: \`acf context 3.1\`

### 2. Creating Tasks

-   When creating a new task, you must provide a clear \`title\`. A \`description\` is highly recommended.
-   **Crucially, you must define one or more \`tests\`** that can be used to verify the task's completion.
    -   A good test is specific, repeatable, and automated if possible (e.g., "Run \`npm test\` and see all tests pass").
    -   A bad test is vague and unhelpful (e.g., "See if it works").
-   Example:
    \`\`\`
    acf add -t "Implement user authentication endpoint" --description "Create the POST /login endpoint that accepts email and password." --tests "Run automated tests in \`auth.test.js\`. Send a POST request to /login with valid credentials and expect a 200 response. Send a request with invalid credentials and expect a 401 response."
    \`\`\`

### 3. Completing a Task

When you have finished the work for a task or subtask, you **must** update its status to "done". This is a critical step.

Your command **must** include the following:

1.  **The Task ID:** The ID of the task or subtask you completed.
2.  **The New Status:** \`done\`.
3.  **\`--related-files\`:** A comma-separated list of all files you created or modified. **This is mandatory.**
4.  **\`-m, --message\`:** A brief message summarizing what you accomplished.

#### **Golden Rule for Completing Tasks**

Always use the \`status\` command in the following format:

\`\`\`
acf status <id> done --related-files "<file1>,<file2>,..." -m "<Your summary of work>"
\`\`\`

#### **Examples:**

-   **Good Example (Correct):**
    \`\`\`
    acf status 4.2 done --related-files "src/api/auth.js,src/routes/auth.js,test/auth.test.js" -m "Implemented the POST /login endpoint and added corresponding unit tests."
    \`\`\`
-   **Bad Example (Incorrect - Missing Files and Message):**
    \`\`\`
    acf status 4.2 done
    \`\`\`

If you try to mark a task as "done" without providing the \`relatedFiles\`, the command will fail. This is intentional.

### 4. Updating Tasks

-   To add or change details of a task (like its description, priority, or tests), use the \`update\` command.
-   When adding new files or tests, they will be merged with the existing ones.
-   Example:
    \`\`\`
    acf update 5 --tests "Add a new test case for edge case X in \`edge.test.js\`"
    \`\`\`

By following these rules, you ensure that the project's progress is tracked accurately and that every piece of work is verifiable.




