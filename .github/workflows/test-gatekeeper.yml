name: 🧪 ACF Test Gatekeeper

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-gatekeeper:
    name: 🛡️ Test Gatekeeper
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v3
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm install -g mcp-proxy
        
    - name: 🔧 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ripgrep curl
        
    - name: 🎭 Install Playwright
      run: |
        npx playwright install chromium
        
    - name: 🧪 Run Unit Tests
      run: |
        echo "🧪 Running Unit Tests..."
        node test/unit/test-simple-tools.js
        
    - name: 🔗 Run Integration Tests
      run: |
        echo "🔗 Running Integration Tests..."
        bash test/integration/test-all-tools-comprehensive.sh
        
    - name: 🏗️ Run Core Functionality Tests
      run: |
        echo "🏗️ Running Core Tests..."
        node test/comprehensive_mcp_test.js
        node test/test_env_guardrails.js
        node test/test_filesystem.js
        
    - name: 🚀 Run MCP Proxy Tests
      run: |
        echo "🚀 Running MCP Proxy Tests..."
        bash test/integration/test-mcp-proxy.sh
        
    - name: 🔄 Run MCP Client Tests
      run: |
        echo "🔄 Running MCP Client Tests..."
        bash test/integration/test-mcp-clients.sh
        
    - name: 🌐 Run MCP Proxy Integration Tests
      run: |
        echo "🌐 Running MCP Proxy Integration Tests..."
        bash test/integration/test-mcp-proxy-integration.sh
        
    - name: 📊 Run Comprehensive Test Suite
      run: |
        echo "📊 Running Comprehensive Test Suite..."
        chmod +x test/run-all-tests.sh
        ./test/run-all-tests.sh
        
    - name: 📋 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-node-${{ matrix.node-version }}
        path: |
          test/reports/
          /tmp/acf_test_*.log
        retention-days: 30
        
    - name: 📈 Generate Test Summary
      if: always()
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Node.js Version:** ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Environment:** Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test/reports/comprehensive-test-results.md" ]; then
          echo "### 📊 Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
          cat test/reports/comprehensive-test-results.md >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "test/reports/SIMPLE-TEST-REPORT.md" ]; then
          echo "### 🔧 Unit Test Results" >> $GITHUB_STEP_SUMMARY
          cat test/reports/SIMPLE-TEST-REPORT.md >> $GITHUB_STEP_SUMMARY
        fi

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Run npm audit
      run: |
        npm audit --audit-level=moderate
        
    - name: 🛡️ Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: 🔎 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  deployment-readiness:
    name: 🚀 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-gatekeeper, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🐳 Test Docker Build
      run: |
        if [ -f "Dockerfile.proxy" ]; then
          echo "🐳 Testing Docker build..."
          docker build -f Dockerfile.proxy -t acf-test .
          echo "✅ Docker build successful"
        else
          echo "⚠️ No Dockerfile.proxy found, skipping Docker test"
        fi
        
    - name: 📋 Generate Deployment Report
      run: |
        echo "## 🚀 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Readiness Checklist" >> $GITHUB_STEP_SUMMARY
        echo "- [x] All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Docker build verified" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Ready for deployment" >> $GITHUB_STEP_SUMMARY
        
    - name: 🎉 Deployment Ready
      run: |
        echo "🎉 All checks passed! ACF is ready for deployment."
        echo "✅ Tests: PASSED"
        echo "✅ Security: PASSED" 
        echo "✅ Build: PASSED"
        echo "🚀 Ready to deploy to production!"

  notify-status:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [test-gatekeeper, security-scan, deployment-readiness]
    if: always()
    
    steps:
    - name: 📊 Calculate Overall Status
      id: status
      run: |
        if [ "${{ needs.test-gatekeeper.result }}" = "success" ] && \
           [ "${{ needs.security-scan.result }}" = "success" ] && \
           [ "${{ needs.deployment-readiness.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=🎉 All checks passed! ACF is production ready." >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some checks failed. Review the logs for details." >> $GITHUB_OUTPUT
        fi
        
    - name: 📢 Post Status Summary
      run: |
        echo "## 🛡️ Gatekeeper Status Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Message:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Gatekeeper:** ${{ needs.test-gatekeeper.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan:** ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Readiness:** ${{ needs.deployment-readiness.result }}" >> $GITHUB_STEP_SUMMARY 