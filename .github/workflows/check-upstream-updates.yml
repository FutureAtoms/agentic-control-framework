name: Check Upstream MCP Updates

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  check-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Desktop Commander MCP updates
      id: check-desktop-commander
      run: |
        # Get latest release info from Desktop Commander MCP
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/wonderwhy-er/DesktopCommanderMCP/releases/latest)
        LATEST_VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
        LATEST_DATE=$(echo $LATEST_RELEASE | jq -r '.published_at')
        
        # Store in file for comparison
        echo "DESKTOP_COMMANDER_VERSION=$LATEST_VERSION" >> upstream-versions.txt
        echo "DESKTOP_COMMANDER_DATE=$LATEST_DATE" >> upstream-versions.txt
        
        # Check if version file exists
        if [ -f ".github/upstream-versions.json" ]; then
          STORED_VERSION=$(jq -r '.desktop_commander.version' .github/upstream-versions.json)
          if [ "$STORED_VERSION" != "$LATEST_VERSION" ]; then
            echo "NEW_VERSION=true" >> $GITHUB_OUTPUT
            echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "NEW_VERSION=true" >> $GITHUB_OUTPUT
          echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Check Playwright MCP updates
      id: check-playwright
      run: |
        # Get latest release info from Playwright MCP
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/microsoft/playwright-mcp/releases/latest)
        LATEST_VERSION=$(echo $LATEST_RELEASE | jq -r '.tag_name')
        LATEST_DATE=$(echo $LATEST_RELEASE | jq -r '.published_at')
        
        # Store in file for comparison
        echo "PLAYWRIGHT_VERSION=$LATEST_VERSION" >> upstream-versions.txt
        echo "PLAYWRIGHT_DATE=$LATEST_DATE" >> upstream-versions.txt
        
        # Check if version file exists
        if [ -f ".github/upstream-versions.json" ]; then
          STORED_VERSION=$(jq -r '.playwright.version' .github/upstream-versions.json)
          if [ "$STORED_VERSION" != "$LATEST_VERSION" ]; then
            echo "NEW_VERSION=true" >> $GITHUB_OUTPUT
            echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "NEW_VERSION=true" >> $GITHUB_OUTPUT
          echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Update version tracking file
      if: steps.check-desktop-commander.outputs.NEW_VERSION == 'true' || steps.check-playwright.outputs.NEW_VERSION == 'true'
      run: |
        # Create or update the version tracking file
        cat > .github/upstream-versions.json << EOF
        {
          "desktop_commander": {
            "version": "${{ steps.check-desktop-commander.outputs.VERSION }}",
            "last_checked": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          },
          "playwright": {
            "version": "${{ steps.check-playwright.outputs.VERSION }}",
            "last_checked": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
        }
        EOF
        
    - name: Create issue for updates
      if: steps.check-desktop-commander.outputs.NEW_VERSION == 'true' || steps.check-playwright.outputs.NEW_VERSION == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const updates = [];
          
          if ('${{ steps.check-desktop-commander.outputs.NEW_VERSION }}' === 'true') {
            updates.push(`- Desktop Commander MCP: ${{ steps.check-desktop-commander.outputs.VERSION }}`);
          }
          
          if ('${{ steps.check-playwright.outputs.NEW_VERSION }}' === 'true') {
            updates.push(`- Playwright MCP: ${{ steps.check-playwright.outputs.VERSION }}`);
          }
          
          const issueBody = `## Upstream MCP Updates Available
          
          The following upstream MCP repositories have new releases:
          
          ${updates.join('\n')}
          
          ### Action Required
          
          1. Review the changes in the upstream repositories
          2. Run the sync script to analyze new/updated tools
          3. Update the integration as needed
          
          ### Links
          - [Desktop Commander MCP Releases](https://github.com/wonderwhy-er/DesktopCommanderMCP/releases)
          - [Playwright MCP Releases](https://github.com/microsoft/playwright-mcp/releases)
          
          ---
          *This issue was automatically created by the upstream update checker workflow.*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸ”„ Upstream MCP Updates Available',
            body: issueBody,
            labels: ['upstream-update', 'enhancement']
          });
          
    - name: Commit version tracking file
      if: steps.check-desktop-commander.outputs.NEW_VERSION == 'true' || steps.check-playwright.outputs.NEW_VERSION == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .github/upstream-versions.json
        git commit -m "chore: Update upstream MCP version tracking"
        git push
