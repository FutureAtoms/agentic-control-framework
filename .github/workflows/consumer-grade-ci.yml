name: 🎯 Consumer-Grade CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode'
        required: false
        default: 'standard'
        type: choice
        options:
        - standard
        - full
        - quick

env:
  NODE_VERSION: '20.x'
  TIMEOUT_MINUTES: 30

jobs:
  # 🧪 Consumer-Grade Testing
  consumer-grade-tests:
    name: 🎯 Consumer-Grade Quality Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        include:
          - os: ubuntu-latest
            node-version: 20.x
            primary: true
    
    timeout-minutes: 30
    
    steps:
    - name: 🎯 Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for better analysis
        
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm install -g mcp-proxy --silent
        
    - name: 🔧 Install System Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -q
        sudo apt-get install -y -q ripgrep curl lsof
        
    - name: 🔧 Install System Dependencies (macOS)  
      if: runner.os == 'macOS'
      run: |
        brew install ripgrep curl
        
    - name: 🎭 Install Browser Dependencies
      if: matrix.primary
      run: |
        npx playwright install chromium --quiet
        
    - name: 🧪 Run Consumer-Grade Test Suite
      run: |
        chmod +x test/consumer-grade-test-suite.sh
        if [ "${{ github.event.inputs.test_mode }}" = "full" ]; then
          ./test/consumer-grade-test-suite.sh --full
        else
          ./test/consumer-grade-test-suite.sh
        fi
        
    - name: 📊 Collect Test Artifacts
      if: always()
      run: |
        # Create comprehensive artifact structure
        mkdir -p artifacts/reports artifacts/logs artifacts/coverage
        
        # Copy test reports
        cp -r test/reports/* artifacts/reports/ 2>/dev/null || true
        
        # Copy test logs  
        cp -r /tmp/acf-consumer-tests/* artifacts/logs/ 2>/dev/null || true
        
        # Generate system info
        echo "## System Information" > artifacts/system-info.md
        echo "- **OS**: ${{ runner.os }}" >> artifacts/system-info.md
        echo "- **Node.js**: $(node --version)" >> artifacts/system-info.md
        echo "- **npm**: $(npm --version)" >> artifacts/system-info.md
        echo "- **Timestamp**: $(date -u)" >> artifacts/system-info.md
        
    - name: 📋 Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: consumer-grade-tests-${{ matrix.os }}-node${{ matrix.node-version }}
        path: artifacts/
        retention-days: 14
        compression-level: 6
        
    - name: 📈 Update Job Summary (Primary)
      if: always() && matrix.primary
      run: |
        echo "## 🎯 Consumer-Grade Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test/reports/consumer-grade-report.md" ]; then
          cat test/reports/consumer-grade-report.md >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Test report not generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ github.job }})" >> $GITHUB_STEP_SUMMARY

  # 🔒 Security & Quality Gates
  security-quality:
    name: 🔒 Security & Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 🎯 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 🛡️ Security Audit
      run: |
        echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
        
        # Run audit with different severity levels
        if npm audit --audit-level=critical --json > audit-critical.json 2>/dev/null; then
          echo "✅ **No critical vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Critical vulnerabilities detected**" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=critical >> $GITHUB_STEP_SUMMARY || true
        fi
        
        if npm audit --audit-level=high --json > audit-high.json 2>/dev/null; then
          echo "✅ **No high-severity vulnerabilities**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **High-severity vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-extended,security-and-quality
        
    - name: 🔎 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        upload: true
        
    - name: 📊 Package Analysis
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Package Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Check package.json structure
        if jq -e '.scripts.test' package.json >/dev/null; then
          echo "✅ Test scripts defined" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No test scripts found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if jq -e '.engines.node' package.json >/dev/null; then
          echo "✅ Node.js version constraints defined" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No Node.js version constraints" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for common files
        [ -f "README.md" ] && echo "✅ README.md present" >> $GITHUB_STEP_SUMMARY
        [ -f "LICENSE" ] && echo "✅ LICENSE present" >> $GITHUB_STEP_SUMMARY
        [ -f ".gitignore" ] && echo "✅ .gitignore present" >> $GITHUB_STEP_SUMMARY

  # 🚀 Deployment Readiness
  deployment-readiness:
    name: 🚀 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [consumer-grade-tests, security-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 🎯 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 🐳 Docker Build Test
      run: |
        echo "## 🐳 Docker Build Verification" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "Dockerfile.proxy" ]; then
          echo "🐳 Building Docker image..." >> $GITHUB_STEP_SUMMARY
          
          if docker build -f Dockerfile.proxy -t acf-test:${{ github.sha }} .; then
            echo "✅ **Docker build successful**" >> $GITHUB_STEP_SUMMARY
            
            # Test container startup
            if docker run --rm -d --name acf-test-run -p 9080:8080 acf-test:${{ github.sha }}; then
              sleep 10
              
              if curl -f http://localhost:9080/health >/dev/null 2>&1; then
                echo "✅ **Container health check passed**" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ **Container health check failed**" >> $GITHUB_STEP_SUMMARY
              fi
              
              docker stop acf-test-run 2>/dev/null || true
            fi
            
            # Clean up
            docker rmi acf-test:${{ github.sha }} 2>/dev/null || true
          else
            echo "❌ **Docker build failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        else
          echo "⚠️ **No Dockerfile.proxy found**" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📋 Environment Check
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🌍 Environment Compatibility" >> $GITHUB_STEP_SUMMARY
        
        # Check Node.js compatibility
        node_version=$(node --version)
        echo "✅ **Node.js**: $node_version" >> $GITHUB_STEP_SUMMARY
        
        # Check npm compatibility  
        npm_version=$(npm --version)
        echo "✅ **npm**: $npm_version" >> $GITHUB_STEP_SUMMARY
        
        # Check essential commands
        commands=("curl" "grep" "awk" "sed")
        for cmd in "${commands[@]}"; do
          if command -v "$cmd" >/dev/null 2>&1; then
            echo "✅ **$cmd**: Available" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **$cmd**: Missing" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: 🎉 Deployment Ready
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎉 Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ All Quality Gates Passed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Consumer-grade tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security analysis completed" >> $GITHUB_STEP_SUMMARY  
        echo "- ✅ Docker build verified" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Environment compatibility confirmed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Ready for Production Deployment!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # 📢 Quality Report  
  quality-report:
    name: 📢 Quality Report & Notification
    runs-on: ubuntu-latest
    needs: [consumer-grade-tests, security-quality, deployment-readiness]
    if: always()
    
    steps:
    - name: 📊 Calculate Overall Status
      id: status
      run: |
        tests_result="${{ needs.consumer-grade-tests.result }}"
        security_result="${{ needs.security-quality.result }}"
        deployment_result="${{ needs.deployment-readiness.result }}"
        
        if [ "$tests_result" = "success" ] && [ "$security_result" = "success" ]; then
          if [ "$deployment_result" = "success" ] || [ "$deployment_result" = "skipped" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "quality=CONSUMER_GRADE" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT  
            echo "quality=NEAR_CONSUMER_GRADE" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "quality=NEEDS_IMPROVEMENT" >> $GITHUB_OUTPUT
        fi
        
    - name: 🎯 Generate Quality Report
      run: |
        echo "# 🎯 ACF Consumer-Grade Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        case "${{ steps.status.outputs.quality }}" in
          "CONSUMER_GRADE")
            echo "## 🎉 CONSUMER-GRADE QUALITY ACHIEVED!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All tests passed with consumer-grade standards" >> $GITHUB_STEP_SUMMARY
            echo "✅ Security analysis completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ Deployment readiness confirmed" >> $GITHUB_STEP_SUMMARY
            echo "✅ Ready for production use" >> $GITHUB_STEP_SUMMARY
            ;;
          "NEAR_CONSUMER_GRADE") 
            echo "## ⚠️ NEAR CONSUMER-GRADE QUALITY" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Core functionality meets consumer standards" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Minor deployment or infrastructure issues" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Review deployment readiness results" >> $GITHUB_STEP_SUMMARY
            ;;
          "NEEDS_IMPROVEMENT")
            echo "## ❌ QUALITY IMPROVEMENT NEEDED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ Test failures or security issues detected" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Address failing tests before deployment" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Review security analysis results" >> $GITHUB_STEP_SUMMARY
            ;;
        esac
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Consumer-Grade Tests | ${{ needs.consumer-grade-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security & Quality | ${{ needs.security-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment Readiness | ${{ needs.deployment-readiness.result == 'success' && '✅ Passed' || needs.deployment-readiness.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: 🚨 Notify on Quality Issues
      if: steps.status.outputs.status != 'success'
      run: |
        echo "::warning title=Quality Issues Detected::Consumer-grade quality standards not fully met. Review the pipeline results above."
        
    - name: 🎉 Celebrate Success
      if: steps.status.outputs.status == 'success'
      run: |
        echo "::notice title=Consumer-Grade Quality Achieved::🎉 All quality gates passed! ACF is ready for production deployment." 