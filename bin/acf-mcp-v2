#!/usr/bin/env node

/**
 * ACF MCP Server v2 Launcher
 * 
 * This script launches the SDK-based MCP server for Claude Code integration
 */

const path = require('path');
const fs = require('fs');
const { spawn } = require('child_process');

// Get project root - resolve from the bin directory
const projectRoot = path.resolve(__dirname, '..');

// Get workspace root
const getArg = (flag) => {
  const index = process.argv.findIndex(arg => arg === flag);
  return index !== -1 && index < process.argv.length - 1 ? process.argv[index + 1] : null;
};

let workspaceRoot = getArg('--workspaceRoot') || 
                     getArg('-w') || 
                     process.env.WORKSPACE_ROOT || 
                     process.cwd();

// MCP server path - use the working mcp_server.js
const mcpServerPath = path.join(projectRoot, 'src', 'mcp_server.js');

// Check if server file exists
if (!fs.existsSync(mcpServerPath)) {
  console.error(`Error: MCP server not found at ${mcpServerPath}`);
  process.exit(1);
}

// Launch the server with proper stdio for MCP protocol
const serverProcess = spawn('node', [
  mcpServerPath,
  '--workspaceRoot',
  workspaceRoot
], {
  stdio: ['pipe', 'pipe', 'pipe'],
  env: {
    ...process.env,
    WORKSPACE_ROOT: workspaceRoot,
    ACF_PATH: projectRoot
  }
});

// Connect stdio streams for MCP protocol communication
process.stdin.pipe(serverProcess.stdin);
serverProcess.stdout.pipe(process.stdout);
serverProcess.stderr.pipe(process.stderr);

// Handle process errors
serverProcess.on('error', (err) => {
  console.error(`Failed to start MCP server: ${err.message}`);
  process.exit(1);
});

// Handle server exit
serverProcess.on('exit', (code) => {
  if (code !== 0 && code !== null) {
    console.error(`MCP server exited with code ${code}`);
  }
  process.exit(code || 0);
});

// Handle termination signals
process.on('SIGINT', () => {
  serverProcess.kill('SIGINT');
});

process.on('SIGTERM', () => {
  serverProcess.kill('SIGTERM');
});